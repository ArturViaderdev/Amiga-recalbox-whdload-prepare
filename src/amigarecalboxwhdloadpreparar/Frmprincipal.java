package amigarecalboxwhdloadpreparar;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.io.FileUtils;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author arturv
 */
public class Frmprincipal extends javax.swing.JFrame {

    /**
     * Creates new form Frmprincipal
     */
    public Frmprincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tjuegos = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        twb = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tlog = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        timagenes = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tjuegos.setName("tjuegos"); // NOI18N

        jButton1.setText("...");
        jButton1.setName("Preparar amiga whdload"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Directorio juegos");

        jLabel2.setText("Directorio workbench");

        twb.setName("twb"); // NOI18N

        jButton2.setText("...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Procesar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        tlog.setColumns(20);
        tlog.setRows(5);
        tlog.setName("tlog"); // NOI18N
        jScrollPane1.setViewportView(tlog);

        jLabel3.setText("Log");

        timagenes.setName("timagenes"); // NOI18N

        jLabel4.setText("Nombre carpeta im√°genes excluir - Vacio para ninguna");

        jButton4.setText("Comprobar Devs");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Mirar si hay archivos c");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Crear solo .uae");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Crear solo lanzadores");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tjuegos, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(twb)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton2)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timagenes)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tjuegos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(twb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timagenes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser;
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Elige un directorio");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            tjuegos.setText(chooser.getSelectedFile().getPath());
            
        } else {
            System.out.println("No Selection ");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser;
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Elige un directorio");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            twb.setText(chooser.getSelectedFile().getPath());
            
        } else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void creauae(String directorio) {
        BufferedWriter writer = null;
        try {
            tlog.append(directorio + "\n");
            File logFile = new File(tjuegos.getText() + "/" + directorio + ".uae");
            writer = new BufferedWriter(new FileWriter(logFile));
            
            writer.write("config_description=UAE default configuration\n");
            writer.write("config_hardware=true\n");
            writer.write("config_host=true\n");
            writer.write("config_version=2.8.1\n");
            writer.write("pandora.blitter_in_partial_mode=0\n");
            writer.write("pandora.joy_conf=0\n");
            writer.write("pandora.joy_port=0\n");
            writer.write("pandora.stylus_offset=0\n");
            writer.write("pandora.custom_dpad=1\n");
            writer.write("pandora.button1=2\n");
            writer.write("pandora.button2=1\n");
            writer.write("pandora.autofire_button=3\n");
            writer.write("pandora.jump=-1\n");
            writer.write("use_debugger=false\n");
            writer.write("floppy0sound=0\n");
            writer.write("floppy1sound=0\n");
            writer.write("floppy2sound=0\n");
            writer.write("floppy3sound=0\n");
            writer.write("floppy_volume=0\n");
            writer.write("scsi=false\n");
            writer.write("sound_volume=0\n");
            writer.write("sound_auto=yes\n");
            writer.write("gfx_refreshrate=0\n");
            writer.write("gfx_vsync=true\n");
            writer.write("gfx_center_horizontal=none\n");
            writer.write("gfx_center_vertical=none\n");
            writer.write("a1000ram=false\n");
            writer.write("rtg_nocustom=true\n");
            writer.write("kickstart_rom_file_id=C4F0F55F,KS ROM v1.3 (A500,A1000,A2000)\n");
            writer.write("pandora.rom_path=/recalbox/share/emulators/amiga/kickstarts/\n");
            writer.write("pandora.floppy_path=/recalbox/share/roms/amiga/\n");
            writer.write("pandora.hardfile_path=/recalbox/share/roms/amiga/\n");
            writer.write("pandora.cd_path=/recalbox/share/roms/amiga/\n");
            writer.write("; host-specific\n");
            writer.write("pandora.cpu_speed=600\n");
            writer.write("pandora.hide_idle_led=0\n");
            writer.write("pandora.tap_delay=10\n");
            writer.write("pandora.custom_controls=0\n");
            writer.write("pandora.custom_up=0\n");
            writer.write("pandora.custom_down=0\n");
            writer.write("pandora.custom_left=0\n");
            writer.write("pandora.custom_right=0\n");
            writer.write("pandora.custom_a=0\n");
            writer.write("pandora.custom_b=0\n");
            writer.write("pandora.custom_x=0\n");
            writer.write("pandora.custom_y=0\n");
            writer.write("pandora.custom_l=0\n");
            writer.write("pandora.custom_r=0\n");
            writer.write("pandora.move_x=0\n");
            writer.write("pandora.move_y=0\n");
            writer.write("; common\n");
            writer.write("use_gui=no\n");
            writer.write("kickstart_rom_file=/recalbox/share/emulators/amiberry/kickstarts/KS31_A1200.rom\n");
            writer.write("kickstart_rom_file_id=1483A091,KS ROM v3.1 (A1200)\n");
            writer.write("kickstart_ext_rom_file=\n");
            writer.write("flash_file=\n");
            writer.write("floppy0=\n");
            writer.write("floppy1=\n");
            writer.write("floppy1type=-1\n");
            writer.write("floppy2=\n");
            writer.write("floppy3=\n");
            writer.write("nr_floppies=1\n");
            writer.write("floppy_speed=100\n");
            writer.write("sound_output=exact\n");
            writer.write("sound_channels=stereo\n");
            writer.write("sound_stereo_separation=7\n");
            writer.write("sound_stereo_mixing_delay=0\n");
            writer.write("sound_frequency=44100\n");
            writer.write("sound_interpol=none\n");
            writer.write("sound_filter=off\n");
            writer.write("sound_filter_type=standard\n");
            writer.write("sound_volume_cd=20\n");
            writer.write("cachesize=0\n");
            writer.write("joyport0=mouse\n");
            writer.write("joyport0autofire=none\n");
            writer.write("joyportfriendlyname0=Nubs as mouse\n");
            writer.write("joyportname0=MOUSE0\n");
            writer.write("joyport1=joy1\n");
            writer.write("joyport1autofire=normal\n");
            writer.write("joyport1mode=djoy\n");
            writer.write("joyportfriendlyname1=USB,2-axis 8-button gamepad  \n");
            writer.write("joyportname1=JOY1\n");
            writer.write("bsdsocket_emu=false\n");
            writer.write("synchronize_clock=true\n");
            writer.write("key_for_menu=293\n");
            writer.write("key_for_quit=0\n");
            writer.write("button_for_menu=-1\n");
            writer.write("button_for_quit=2\n");
            writer.write("gfx_framerate=0\n");
            writer.write("gfx_width=704\n");
            writer.write("gfx_height=280\n");
            writer.write("gfx_width_windowed=704\n");
            writer.write("gfx_height_windowed=280\n");
            writer.write("gfx_width_fullscreen=704\n");
            writer.write("gfx_height_fullscreen=280\n");
            writer.write("gfx_lores=true\n");
            writer.write("gfx_resolution=lores\n");
            writer.write("gfx_correct_aspect=0\n");
            writer.write("gfx_fullscreen_ratio=100\n");
            writer.write("kbd_led_num=-1\n");
            writer.write("kbd_led_scr=-1\n");
            writer.write("kbd_led_cap=-1\n");
            writer.write("immediate_blits=false\n");
            writer.write("waiting_blits=automatic\n");
            writer.write("fast_copper=false\n");
            writer.write("ntsc=false\n");
            writer.write("chipset=aga\n");
            writer.write("chipset_refreshrate=0.000000\n");
            writer.write("collision_level=playfields\n");
            writer.write("fastmem_size=8\n");
            writer.write("z3mem_size=0\n");
            writer.write("z3mem_start=0x1000000\n");
            writer.write("bogomem_size=0\n");
            writer.write("gfxcard_size=0\n");
            writer.write("gfxcard_type=ZorroIII\n");
            writer.write("chipmem_size=4\n");
            writer.write("cpu_speed=max\n");
            writer.write("cpu_type=68ec020\n");
            writer.write("cpu_model=68020\n");
            writer.write("cpu_compatible=false\n");
            writer.write("cpu_24bit_addressing=true\n");
            writer.write("rtg_modes=0x502\n");
            writer.write("filesystem2=rw,DH0:DH0:$(FILE_PATH)/sistema/,0\n");
            writer.write("uaehf0=dir,rw,DH0:DH0:$(FILE_PATH)/sistema/,0\n");
            writer.write("filesystem2=rw,DH1:DH1:$(FILE_PATH)/" + directorio + "/,0\n");
            writer.write("uaehf1=dir,rw,DH1:DH1:$(FILE_PATH)/" + directorio + "/,0\n");
            writer.write("input.config=0\n");
            writer.write("input.joymouse_speed_analog=2\n");
            writer.write("input.joymouse_speed_digital=10\n");
            writer.write("input.joymouse_deadzone=33\n");
            writer.write("input.joystick_deadzone=33\n");
            writer.write("input.analog_joystick_multiplier=15\n");
            writer.write("input.analog_joystick_offset=-1\n");
            writer.write("input.mouse_speed=25\n");
            writer.write("input.autofire_speed=0\n");
            writer.write("input.1.joystick.0.friendlyname=dPad as joystick\n");
            writer.write("input.1.joystick.0.name=JOY0\n");
            writer.write("input.1.joystick.0.empty=true\n");
            writer.write("input.1.joystick.0.disabled=false\n");
            writer.write("input.1.joystick.1.friendlyname=USB,2-axis 8-button gamepad\n");
            writer.write("input.1.joystick.1.name=JOY1\n");
            writer.write("input.1.joystick.1.empty=true\n");
            writer.write("input.1.joystick.1.disabled=false\n");
            writer.write("input.1.joystick.2.empty=true\n");
            writer.write("input.1.joystick.2.disabled=false\n");
            writer.write("input.1.joystick.3.empty=true\n");
            writer.write("input.1.joystick.3.disabled=false\n");
            writer.write("input.1.joystick.4.empty=true\n");
            writer.write("input.1.joystick.4.disabled=false\n");
            writer.write("input.1.joystick.5.empty=true\n");
            writer.write("input.1.joystick.5.disabled=false\n");
            writer.write("input.1.joystick.6.empty=true\n");
            writer.write("input.1.joystick.6.disabled=false\n");
            writer.write("input.1.joystick.7.empty=true\n");
            writer.write("input.1.joystick.7.disabled=false\n");
            writer.write("input.1.mouse.0.friendlyname=Nubs as mouse\n");
            writer.write("input.1.mouse.0.name=MOUSE0\n");
            writer.write("input.1.mouse.0.empty=true\n");
            writer.write("input.1.mouse.0.disabled=false\n");
            writer.write("input.1.mouse.1.friendlyname=dPad as mouse\n");
            writer.write("input.1.mouse.1.name=MOUSE1\n");
            writer.write("input.1.mouse.1.empty=true\n");
            writer.write("input.1.mouse.1.disabled=false\n");
            writer.write("input.1.mouse.2.empty=true\n");
            writer.write("input.1.mouse.2.disabled=false\n");
            writer.write("input.1.mouse.3.empty=true\n");
            writer.write("input.1.mouse.3.disabled=false\n");
            writer.write("input.1.mouse.4.empty=true\n");
            writer.write("input.1.mouse.4.disabled=false\n");
            writer.write("input.1.mouse.5.empty=true\n");
            writer.write("input.1.mouse.5.disabled=false\n");
            writer.write("input.1.mouse.6.empty=true\n");
            writer.write("input.1.mouse.6.disabled=false\n");
            writer.write("input.1.mouse.7.empty=true\n");
            writer.write("input.1.mouse.7.disabled=false\n");
            writer.write("input.1.keyboard.0.friendlyname=Default Keyboard\n");
            writer.write("input.1.keyboard.0.name=KEYBOARD0\n");
            writer.write("input.1.keyboard.0.empty=false\n");
            writer.write("input.1.keyboard.0.disabled=false\n");
            writer.write("input.1.keyboard.1.empty=true\n");
            writer.write("input.1.keyboard.1.disabled=false\n");
            writer.write("input.1.keyboard.2.empty=true\n");
            writer.write("input.1.keyboard.2.disabled=false\n");
            writer.write("input.1.keyboard.3.empty=true\n");
            writer.write("input.1.keyboard.3.disabled=false\n");
            writer.write("input.1.keyboard.4.empty=true\n");
            writer.write("input.1.keyboard.4.disabled=false\n");
            writer.write("input.1.keyboard.5.empty=true\n");
            writer.write("input.1.keyboard.5.disabled=false\n");
            writer.write("input.1.keyboard.6.empty=true\n");
            writer.write("input.1.keyboard.6.disabled=false\n");
            writer.write("input.1.keyboard.7.empty=true\n");
            writer.write("input.1.keyboard.7.disabled=false\n");
            writer.write("input.2.joystick.0.friendlyname=dPad as joystick\n");
            writer.write("input.2.joystick.0.name=JOY0\n");
            writer.write("input.2.joystick.0.empty=true\n");
            writer.write("input.2.joystick.0.disabled=false\n");
            writer.write("input.2.joystick.1.friendlyname=USB,2-axis 8-button gamepad\n");
            writer.write("input.2.joystick.1.name=JOY1\n");
            writer.write("input.2.joystick.1.empty=true\n");
            writer.write("input.2.joystick.1.disabled=false\n");
            writer.write("input.2.joystick.2.empty=true\n");
            writer.write("input.2.joystick.2.disabled=false\n");
            writer.write("input.2.joystick.3.empty=true\n");
            writer.write("input.2.joystick.3.disabled=false\n");
            writer.write("input.2.joystick.4.empty=true\n");
            writer.write("input.2.joystick.4.disabled=false\n");
            writer.write("input.2.joystick.5.empty=true\n");
            writer.write("input.2.joystick.5.disabled=false\n");
            writer.write("input.2.joystick.6.empty=true\n");
            writer.write("input.2.joystick.6.disabled=false\n");
            writer.write("input.2.joystick.7.empty=true\n");
            writer.write("input.2.joystick.7.disabled=false\n");
            writer.write("input.2.mouse.0.friendlyname=Nubs as mouse\n");
            writer.write("input.2.mouse.0.name=MOUSE0\n");
            writer.write("input.2.mouse.0.empty=true\n");
            writer.write("input.2.mouse.0.disabled=false\n");
            writer.write("input.2.mouse.1.friendlyname=dPad as mouse\n");
            writer.write("input.2.mouse.1.name=MOUSE1\n");
            writer.write("input.2.mouse.1.empty=true\n");
            writer.write("input.2.mouse.1.disabled=false\n");
            writer.write("input.2.mouse.2.empty=true\n");
            writer.write("input.2.mouse.2.disabled=false\n");
            writer.write("input.2.mouse.3.empty=true\n");
            writer.write("input.2.mouse.3.disabled=false\n");
            writer.write("input.2.mouse.4.empty=true\n");
            writer.write("input.2.mouse.4.disabled=false\n");
            writer.write("input.2.mouse.5.empty=true\n");
            writer.write("input.2.mouse.5.disabled=false\n");
            writer.write("input.2.mouse.6.empty=true\n");
            writer.write("input.2.mouse.6.disabled=false\n");
            writer.write("input.2.mouse.7.empty=true\n");
            writer.write("input.2.mouse.7.disabled=false\n");
            writer.write("input.2.keyboard.0.friendlyname=Default Keyboard\n");
            writer.write("input.2.keyboard.0.name=KEYBOARD0\n");
            writer.write("input.2.keyboard.0.empty=false\n");
            writer.write("input.2.keyboard.0.disabled=false\n");
            writer.write("input.2.keyboard.1.empty=true\n");
            writer.write("input.2.keyboard.1.disabled=false\n");
            writer.write("input.2.keyboard.2.empty=true\n");
            writer.write("input.2.keyboard.2.disabled=false\n");
            writer.write("input.2.keyboard.3.empty=true\n");
            writer.write("input.2.keyboard.3.disabled=false\n");
            writer.write("input.2.keyboard.4.empty=true\n");
            writer.write("input.2.keyboard.4.disabled=false\n");
            writer.write("input.2.keyboard.5.empty=true\n");
            writer.write("input.2.keyboard.5.disabled=false\n");
            writer.write("input.2.keyboard.6.empty=true\n");
            writer.write("input.2.keyboard.6.disabled=false\n");
            writer.write("input.2.keyboard.7.empty=true\n");
            writer.write("input.2.keyboard.7.disabled=false\n");
            writer.write("input.3.joystick.0.friendlyname=dPad as joystick\n");
            writer.write("input.3.joystick.0.name=JOY0\n");
            writer.write("input.3.joystick.0.empty=true\n");
            writer.write("input.3.joystick.0.disabled=false\n");
            writer.write("input.3.joystick.1.friendlyname=USB,2-axis 8-button gamepad\n");
            writer.write("input.3.joystick.1.name=JOY1\n");
            writer.write("input.3.joystick.1.empty=true\n");
            writer.write("input.3.joystick.1.disabled=false\n");
            writer.write("input.3.joystick.2.empty=true\n");
            writer.write("input.3.joystick.2.disabled=false\n");
            writer.write("input.3.joystick.3.empty=true\n");
            writer.write("input.3.joystick.3.disabled=false\n");
            writer.write("input.3.joystick.4.empty=true\n");
            writer.write("input.3.joystick.4.disabled=false\n");
            writer.write("input.3.joystick.5.empty=true\n");
            writer.write("input.3.joystick.5.disabled=false\n");
            writer.write("input.3.joystick.6.empty=true\n");
            writer.write("input.3.joystick.6.disabled=false\n");
            writer.write("input.3.joystick.7.empty=true\n");
            writer.write("input.3.joystick.7.disabled=false\n");
            writer.write("input.3.mouse.0.friendlyname=Nubs as mouse\n");
            writer.write("input.3.mouse.0.name=MOUSE0\n");
            writer.write("input.3.mouse.0.empty=true\n");
            writer.write("input.3.mouse.0.disabled=false\n");
            writer.write("input.3.mouse.1.friendlyname=dPad as mouse\n");
            writer.write("input.3.mouse.1.name=MOUSE1\n");
            writer.write("input.3.mouse.1.empty=true\n");
            writer.write("input.3.mouse.1.disabled=false\n");
            writer.write("input.3.mouse.2.empty=true\n");
            writer.write("input.3.mouse.2.disabled=false\n");
            writer.write("input.3.mouse.3.empty=true\n");
            writer.write("input.3.mouse.3.disabled=false\n");
            writer.write("input.3.mouse.4.empty=true\n");
            writer.write("input.3.mouse.4.disabled=false\n");
            writer.write("input.3.mouse.5.empty=true\n");
            writer.write("input.3.mouse.5.disabled=false\n");
            writer.write("input.3.mouse.6.empty=true\n");
            writer.write("input.3.mouse.6.disabled=false\n");
            writer.write("input.3.mouse.7.empty=true\n");
            writer.write("input.3.mouse.7.disabled=false\n");
            writer.write("input.3.keyboard.0.friendlyname=Default Keyboard\n");
            writer.write("input.3.keyboard.0.name=KEYBOARD0\n");
            writer.write("input.3.keyboard.0.empty=false\n");
            writer.write("input.3.keyboard.0.disabled=false\n");
            writer.write("input.3.keyboard.1.empty=true\n");
            writer.write("input.3.keyboard.1.disabled=false\n");
            writer.write("input.3.keyboard.2.empty=true\n");
            writer.write("input.3.keyboard.2.disabled=false\n");
            writer.write("input.3.keyboard.3.empty=true\n");
            writer.write("input.3.keyboard.3.disabled=false\n");
            writer.write("input.3.keyboard.4.empty=true\n");
            writer.write("input.3.keyboard.4.disabled=false\n");
            writer.write("input.3.keyboard.5.empty=true\n");
            writer.write("input.3.keyboard.5.disabled=false\n");
            writer.write("input.3.keyboard.6.empty=true\n");
            writer.write("input.3.keyboard.6.disabled=false\n");
            writer.write("input.3.keyboard.7.empty=true\n");
            writer.write("input.3.keyboard.7.disabled=false\n");
            writer.write("input.4.joystick.1.friendlyname=USB,2-axis 8-button gamepad\n");
            writer.write("input.4.joystick.1.name=JOY1\n");
            writer.write("input.4.joystick.1.custom=true\n");
            writer.write("input.4.mouse.0.friendlyname=Nubs as mouse\n");
            writer.write("input.4.mouse.0.name=MOUSE0\n");
            writer.write("input.4.mouse.0.custom=true\n");
            writer.write("input.4.keyboard.0.friendlyname=Default Keyboard\n");
            writer.write("input.4.keyboard.0.name=KEYBOARD0\n");
            writer.write("input.4.keyboard.0.custom=true\n");
            
        } catch (Exception e) {
            e.printStackTrace();
            
        } finally {
            try {
                writer.close();
            } catch (Exception e) {
            }
        }
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        boolean excluye = false;
        if (!tjuegos.getText().equals("") && !twb.getText().equals("")) {
            //Obtenemos los directorios (cada juego)
            File file = new File(tjuegos.getText());
            String[] directories = file.list(new FilenameFilter() {
                @Override
                public boolean accept(File current, String name) {
                    return new File(current, name).isDirectory();
                }
            });
            
            File srcDir = new File(twb.getText() + "/C");
            File destDir = new File(tjuegos.getText() + "/sistema/C");
            try {
                FileUtils.copyDirectory(srcDir, destDir);
            } catch (Exception ex) {
                tlog.append("Error copiando carpetas del sistema C");
            }
            
            srcDir = new File(twb.getText() + "/S");
            destDir = new File(tjuegos.getText() + "/sistema/S");
            try {
                FileUtils.copyDirectory(srcDir, destDir);
            } catch (Exception ex) {
                tlog.append("Error copiando carpetas del sistema S");
            }
            
            srcDir = new File(twb.getText() + "/Devs");
            destDir = new File(tjuegos.getText() + "/sistema/Devs");
            try {
                FileUtils.copyDirectory(srcDir, destDir);
            } catch (Exception ex) {
                tlog.append("Error copiando carpetas del sistema DEVS");
            }
            
            try {
                BufferedWriter writer = new BufferedWriter(new FileWriter(tjuegos.getText() + "/sistema/S/Startup-Sequence"));
                writer.write("dh1:\nexecute recaljue.cli");
                writer.close();
                
            } catch (Exception e) {
                tlog.append("Error escribiendo startup-sequence");
            }
            
            for (String directorio : directories) {
                excluye = false;
                if (!timagenes.getText().equals("")) {
                    if (timagenes.getText().equals(directorio)) {
                        excluye = true;
                    }
                }
                if (timagenes.getText().equals("sistema")) {
                    excluye = true;
                }
                
                if (!excluye) {
                    creauae(directorio);
                    
                    crealanzador(directorio);
                    
                }
                
            }
            tlog.append("Proceso completado.");
            
        } else {
            JOptionPane.showMessageDialog(null, "Selecciona un directorio de juegos y uno de workbench", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        

    }//GEN-LAST:event_jButton3ActionPerformed

    private void crealanzador(String directorio)
    {
          try {
                        //create a temporary file

                        File dir = new File(tjuegos.getText() + "/" + directorio);
                        File[] files = dir.listFiles(new FilenameFilter() {
                            public boolean accept(File dir, String name) {
                                return name.toLowerCase().endsWith(".slave");
                            }
                            
                        });
                        
                        if (files.length > 0) {
                           
                            // File (or directory) with old name
                            File viejo = new File(tjuegos.getText() + "/" + directorio + "/" + files[0].getName());

                            // File (or directory) with new name
                            File nuevo = new File(tjuegos.getText() + "/" + directorio + "/recaljuego.slave");

                            if (nuevo.exists()) {
                                tlog.append("El archivo slave recaljuego.slave ya exist√≠a para el juego " + directorio + ".");
                            } else {
                                boolean success = viejo.renameTo(nuevo);

                                if (!success) {
                                    tlog.append("El .slave no se ha renombrado bien en el juego " + directorio);
                                }
                            }
                            // Rename file (or directory)

                            
                            
                            try {
                                
                                BufferedWriter writer = new BufferedWriter(new FileWriter(tjuegos.getText() + "/" + directorio + "/recaljue.cli"));
                                writer.write("WHDLoad recaljuego.slave Preload ButtonWait\nUaeQuit");
                                
                                writer.close();
                            } catch (Exception e) {
                                tlog.append("Error escribiendo lanzador cli. recaljue.cli");
                            }
                            
                        } else {
                            tlog.append("No se encuentra el archivo whdload del juego " + directorio);
                        }

                        //Close writer
                    } catch (Exception e) {
                        tlog.append("Error listando archivos slave");
                    }
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int cont = 0;
        boolean excluye = false;
        File file = new File(tjuegos.getText());
        String[] directories = file.list(new FilenameFilter() {
            @Override
            public boolean accept(File current, String name) {
                return new File(current, name).isDirectory();
            }
        });
        
        for (String directorio : directories) {
            excluye = false;
            if (!timagenes.getText().equals("")) {
                if (timagenes.getText().equals(directorio)) {
                    excluye = true;
                }
            }
            
            if (!excluye) {
                
                File f = new File(tjuegos.getText() + "/" + directorio + "/DEVS");
                if (!(f.exists() && f.isDirectory())) {
                    tlog.append("Falta DEVS en juego " + directorio);
                } else {
                    cont++;
                }
            }
        }
        tlog.append("Directorios comprobados " + cont);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        int cont = 0;
        boolean excluye = false;
        File file = new File(tjuegos.getText());
        String[] directories = file.list(new FilenameFilter() {
            @Override
            public boolean accept(File current, String name) {
                return new File(current, name).isDirectory();
            }
        });
        
        for (String directorio : directories) {
            excluye = false;
            if (!timagenes.getText().equals("")) {
                if (timagenes.getText().equals(directorio)) {
                    excluye = true;
                }
            }
            
            if (!excluye) {
                
                File f = new File(tjuegos.getText() + "/" + directorio + "/c");
                if ((f.exists() & f.isFile())) {
                    tlog.append("Existe C en juego " + directorio);
                } else {
                    cont++;
                }
            }
        }
        tlog.append("Directorios comprobados " + cont);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        boolean excluye = false;
        if (!tjuegos.getText().equals("")) {
            //Obtenemos los directorios (cada juego)
            File file = new File(tjuegos.getText());
            String[] directories = file.list(new FilenameFilter() {
                @Override
                public boolean accept(File current, String name) {
                    return new File(current, name).isDirectory();
                }
            });
            
            for (String directorio : directories) {
               tlog.append(directorio);
                excluye = false;
                if (!timagenes.getText().equals("")) {
                    if (timagenes.getText().equals(directorio)) {
                        excluye = true;
                    }
                }
                if (timagenes.getText().equals("sistema")) {
                    excluye = true;
                }
                
                if (!excluye) {
                    creauae(directorio);
                }
            }
            tlog.append("Proceso completado.");
            
        } else {
            JOptionPane.showMessageDialog(null, "Selecciona un directorio de juegos.", "Error", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        
          boolean excluye = false;
        if (!tjuegos.getText().equals("")) {
            //Obtenemos los directorios (cada juego)
            File file = new File(tjuegos.getText());
            String[] directories = file.list(new FilenameFilter() {
                @Override
                public boolean accept(File current, String name) {
                    return new File(current, name).isDirectory();
                }
            });
            
            for (String directorio : directories) {
                excluye = false;
                if (!timagenes.getText().equals("")) {
                    if (timagenes.getText().equals(directorio)) {
                        excluye = true;
                    }
                }
                if (timagenes.getText().equals("sistema")) {
                    excluye = true;
                }
                
                if (!excluye) {
                    crealanzador(directorio);
                }
            }
            tlog.append("Proceso completado.");
            
        } else {
            JOptionPane.showMessageDialog(null, "Selecciona un directorio de juegos.", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        
        
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                    
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frmprincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frmprincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frmprincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frmprincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frmprincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField timagenes;
    private javax.swing.JTextField tjuegos;
    private javax.swing.JTextArea tlog;
    private javax.swing.JTextField twb;
    // End of variables declaration//GEN-END:variables
}
